#!/usr/bin/env python
# http://github.com/adw/lh/

import httplib2
import xml.etree.ElementTree as etree
import ConfigParser
from collections import defaultdict
import sys
import os

COMMANDS = []

def command(meth):
    COMMANDS.append(meth.__name__)
    return meth
    
def getconfig():
    fn = os.path.join(os.environ["HOME"], ".lhcfg")
    cp = ConfigParser.SafeConfigParser()
    cp.read(fn)
    d = defaultdict(lambda: None)
    d.update(cp.items('global'))
    return d
    
class Client(httplib2.Http):
    def __init__(self, key):
        super(Client, self).__init__()
        self.add_credentials(key, "x")
    
    def get(self, url):
        resp, content = self.request(url, "GET", headers={
            "content-type": "text/xml",
        })
        if (resp["status"] == "200" or resp["status"] == "304"):
            tree = etree.fromstring(content)
            return tree, resp
        else:
            return None, resp
    
    def put(self, url, data):
        resp, content = self.request(url, "PUT", body=data,
            headers={"content-type": "text/xml"})
        return resp, content
        
class LighthouseClient(Client):
    def __init__(self, config):
        super(LighthouseClient, self).__init__(config["key"])
        self.config = config
    
    @staticmethod
    def parse_tickets(tree, show_milestone=None):
        res = []
        for t in tree.getiterator(tag="ticket"):
            milestone = t.find("milestone-id")
            if milestone is None:
                milestone == 0
            else:
                milestone = milestone.text
            title = t.find("title").text
            number = t.find("number").text
            priority = int(t.find("priority").text)
            if not show_milestone or milestone==show_milestone:
                res.append((milestone, priority, number, title))
        return res
   
    @command
    def list(self, *args):
        res = []
        t = self.get(
                "http://%s.lighthouseapp.com/projects/%s/tickets.xml" % (
                self.config["account"], self.config["project"]))
        if t[0]:
            for t in sorted(self.parse_tickets(t[0], 
                            show_milestone=self.config["milestone"])):
                res.append(" ".join(str(x) for x in t[1:]))
        else:
            res.append(str(t[1]))
        return "\n".join(res)
    
    @command
    def setstatus(self, *args):
        ticket_no = args[0]
        ticket_status = args[1]
        comment = args[2:]
        ticket = etree.Element("ticket")
        status = etree.Element("state")
        body = etree.Element("body")
        status.text = ticket_status
        body.text = " ".join(comment)
        ticket.append(status)
        ticket.append(body)
        tree = etree.tostring(ticket)
        url = "http://%s.lighthouseapp.com/projects/%s/tickets/%s.xml" % (
                self.config["account"], self.config["project"], ticket_no)
        resp = self.put(url, tree)
        return "Done."

if __name__ == "__main__":
    cfg = getconfig()
    lhc = LighthouseClient(config=cfg)
    try:
        cmd = sys.argv[1]
        if cmd in COMMANDS:
            print getattr(lhc, cmd)(*sys.argv[2:])
        else:
            raise IndexError
    except IndexError:
        print "Commands: %s" % " ".join(x for x in COMMANDS)